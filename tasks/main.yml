---
- name: Install packages
  yum: name={{ item }} state=latest
  tags: [ "elasticsearch" , "packages" ]
  with_items:
    - java-1.8.0-openjdk

- name: Set es_http_listen_port
  set_fact:
    es_http_listen_port="{{ es_http_port + 1 }}"
  when: es_ssl_proxy
  tags: [ 'elasticsearch' , 'esmm' , 'esconfig' , 'nginx' , 'nginxconfig' , 'kibana' , 'kibanaconfig' ]

- name: Get current HTTP port
  shell: >
    grep http.port /etc/elasticsearch/elasticsearch.yml | cut -d ' ' -f 2
  register: current_es_http_port
  changed_when: False
  tags: [ 'elasticsearch' , 'esmm'  ]

- name: Remove old repos
  file:
    path=/etc/yum.repos.d/elasticsearch-1.{{ item }}.repo
    state=absent
  with_sequence:
    start=1
    end=2
    stride=1
  tags: [ "elasticsearch" , "yum" ]

- name: Install elasticsearch repo
  copy:
    src=elasticsearch-1.3.repo
    dest=/etc/yum.repos.d/elasticsearch-1.3.repo
    owner=root
    group=root
    mode=0644
  tags: [ "elasticsearch" , "yum" ]

- name: Copy Elasticsearch GPG key
  copy:
    src=GPG-KEY-elasticsearch
    dest=/etc/pki/rpm-gpg/GPG-KEY-elasticsearch
    owner=root
    group=root
    mode=0644
  tags: [ "elasticsearch" , "yum" ]
  notify: install elasticsearch gpg key

- name: Install elasticsearch
  yum: name=elasticsearch state=present
  register: es_install_status
  notify: restart elasticsearch
  tags: [ "elasticsearch" , "name" ]

- name: Copy main elasticsearch config
  template:
    src=elasticsearch.yml.j2
    dest=/etc/elasticsearch/elasticsearch.yml
    owner=root
    group=root
    mode=0644
  tags: [ "elasticsearch" , "esconfig" ]
  notify: restart elasticsearch

- name: Start and enable elasticsearch
  service:
    name=elasticsearch
    enabled=yes
    state=started
  tags: [ "elasticsearch" , "name" ]

- name: Copy elasticsearch system config
  template:
    src=etc-sysconfig-elasticsearch.j2
    dest=/etc/sysconfig/elasticsearch
    owner=root
    group=root
    mode=0644
  tags: [ "elasticsearch" , "esconfig" ]
  notify: restart elasticsearch

- name: Copy elasticsearch nginx config
  template:
    src=etc-nginx-conf.d-elasticsearch.j2
    dest=/etc/nginx/conf.d/elasticsearch.conf
    owner=root
    group=root
    mode=0644
  tags: [ "elasticsearch" , "esconfig" , "nginx" , "nginxconfig" ]
  when: es_ssl_proxy
  notify: reload nginx

- name: Remove elasticsearch nginx config
  file:
    path=/etc/nginx/conf.d/elasticsearch.conf
    state=absent
  tags: [ "elasticsearch" , "esconfig" , "nginx" , "nginxconfig" ]
  when: not es_ssl_proxy
  notify: reload nginx

- name: Create /etc/elasticsearch/scripts
  file:
    path=/etc/elasticsearch/scripts
    state=directory
    owner=root
    group=root
    mode=755
  tags: [ 'elasticsearch' , 'esconfig' ]

- name: Copy elasticsearch synthetic field script
  copy:
    src=kibana
    dest=/etc/elasticsearch/scripts
    owner=root
    group=root
    mode=0644
    directory_mode=755
  tags: [ 'elasticsearch' , 'esconfig' ]

- name: Disable swap in /etc/fstab
  lineinfile:
    state=present
    backup=yes
    dest=/etc/fstab
    regexp='^#?(.*swap.*$)'
    line='#\1'
    backrefs=yes
  when: es_disable_swap | bool
  notify: turn off swap
  tags: [ 'elasticsearch' , 'esconfig' , 'esswap' ]

- name: Enable swap in /etc/fstab
  lineinfile:
    state=present
    backup=yes
    dest=/etc/fstab
    regexp='^#+(.*swap.*$)'
    line='\1'
    backrefs=yes
  when: not es_disable_swap | bool
  notify: turn on swap
  tags: [ 'elasticsearch' , 'esconfig' , 'esswap' ]

- name: Add task to compress old elasticsearch logs
  cron:
    name="Compress elasticsearch logs"
    state=present
    user=root
    cron_file=elasticsearch
    hour=4
    minute=10
    job="find /var/log/elasticsearch -type f -mtime +1 -name '*.log.2*' ! -name '*.gz' -exec gzip '{}' ';'"
  tags: [ 'elasticsearch' , 'escron' ]

- name: Add task to delete old elasticsearch logs
  cron:
    name="Delete elasticsearch logs"
    state=present
    user=root
    cron_file=elasticsearch
    hour=4
    minute=00
    job="find /var/log/elasticsearch -type f -mtime +10 -name '*.gz' -exec rm '{}' ';'"
  tags: [ 'elasticsearch' , 'escron' ]

# This extra restart is necessary to prevent the check following tasks from
# failing because they will be looking at the wrong port.
- name: Restart elasticsearch if new HTTP port is different
  service: name=elasticsearch state=restarted
  when: es_http_listen_port != current_es_http_port.stdout
  tags: [ 'elasticsearch' , 'esmm' ]

- name: Wait for elasticsearch HTTP port
  wait_for: port={{ es_http_listen_port }}
  tags: [ 'elasticsearch' , 'esmm' ]

- name: Get current value of discovery.zen.minimum_master_nodes
  uri: url=http://localhost:{{ es_http_listen_port }}/_cluster/settings method=GET
  until: es_settings.status == 200
  retries: 20
  delay: 30
  register: es_settings
  tags: [ 'elasticsearch' , 'esmm' ]

- name: Update discovery.zen.minimum_master_nodes
  uri: >
    url=http://localhost:{{ es_http_listen_port }}/_cluster/settings
    method=PUT
    body='{"persistent" : {"discovery.zen.minimum_master_nodes": "{{ es_minimum_master_nodes }}"}}'
  when: >
    es_settings.json.persistent is not defined
    or es_settings.json.persistent.discovery is not defined
    or es_settings.json.persistent.discovery.zen.minimum_master_nodes is not defined
    or es_settings.json.persistent.discovery.zen.minimum_master_nodes != es_minimum_master_nodes
  tags: [ 'elasticsearch' , 'esmm' ]

- { include: update-plugins.yml, when: es_update_plugins or es_install_status.changed }
